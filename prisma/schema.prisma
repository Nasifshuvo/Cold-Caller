generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  roleId    Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client?
  role      Role     @relation(fields: [roleId], references: [id])

  @@index([email])
  @@index([roleId])
}

model Client {
  id                      Int           @id @default(autoincrement())
  name                    String?
  email                   String
  phone                   String
  userId                  Int           @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  active                  Boolean       @default(true)
  vapiKey                 String?       @unique
  vapiAssistantId         String?
  vapiPhoneNumberId       String?
  estimatedCallCost       Int?
  balanceInSeconds        Decimal       @default(0.00) @db.Decimal(10, 2)
  estimatedMinutesPerCall Decimal       @default(3.00) @db.Decimal(10, 2)
  calls                   Call[]
  campaigns               Campaign[]
  user                    User          @relation(fields: [userId], references: [id])
  leads                   Lead[]
  leadImports             LeadImport[]
  transactions            Transaction[]

  @@index([vapiKey])
  @@index([userId])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  type      String
  clientId  Int
  createdAt DateTime @default(now())
  processed Boolean  @default(false)
  reason    String?
  reference String?
  seconds   Decimal  @default(0.00) @db.Decimal(10, 2)
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model Log {
  id          Int      @id @default(autoincrement())
  event       String   @db.VarChar(255)
  description Json
  createdAt   DateTime @default(now())
  vapiCallId  String?  @db.VarChar(255)

  @@index([event])
  @@index([vapiCallId])
}

model LeadImport {
  id         Int      @id @default(autoincrement())
  clientId   Int
  fileName   String
  totalLeads Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  leads      Lead[]
  client     Client   @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model Lead {
  id          Int         @id @default(autoincrement())
  clientId    Int
  importId    Int?
  phoneNumber String
  name        String?
  callStatus  String      @default("Not Initiated")
  response    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  campaignId  Int?
  calls       Call[]
  campaign    Campaign?   @relation(fields: [campaignId], references: [id])
  client      Client      @relation(fields: [clientId], references: [id])
  leadImport  LeadImport? @relation(fields: [importId], references: [id])

  @@unique([clientId, phoneNumber], name: "clientId_phoneNumber")
  @@index([clientId])
  @@index([phoneNumber])
  @@index([importId])
  @@index([campaignId])
}

model Call {
  id                 Int       @id @default(autoincrement())
  leadId             Int?
  clientId           Int
  callStatus         String    @default("Not Initiated")
  response           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  analysis           Json?
  assistantId        String?
  cost               Decimal?  @db.Decimal(10, 4)
  costBreakdown      Json?
  costDeducted       Boolean   @default(false)
  customerNumber     String?
  endedAt            DateTime?
  endedReason        String?
  final_cost         Decimal?  @default(dbgenerated("(`cost` * 2)")) @db.Decimal(10, 4)
  messages           Json?
  recordingUrl       String?   @db.Text
  startedAt          DateTime?
  stereoRecordingUrl String?   @db.Text
  summary            String?   @db.Text
  transcript         String?   @db.Text
  type               String?
  vapiCallId         String?   @unique @db.VarChar(255)
  webCallUrl         String?   @db.Text
  campaignId         Int?
  durationInSeconds  Int?
  campaign           Campaign? @relation(fields: [campaignId], references: [id])
  client             Client    @relation(fields: [clientId], references: [id])
  lead               Lead?     @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([clientId])
  @@index([vapiCallId])
  @@index([campaignId])
}

model Campaign {
  id               Int      @id @default(autoincrement())
  name             String
  type             String   @default("Call")
  status           String   @default("Draft")
  clientId         Int
  totalLeads       Int      @default(0)
  processedLeads   Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  actualSeconds    Decimal  @default(0.00) @db.Decimal(10, 2)
  estimatedSeconds Decimal  @default(0.00) @db.Decimal(10, 2)
  calls            Call[]
  client           Client   @relation(fields: [clientId], references: [id])
  leads            Lead[]

  @@index([clientId])
  @@index([status])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  date      DateTime
  time      String
  status    String   @default("SCHEDULED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?
  callId    String?

  @@index([email])
  @@index([date])
  @@index([status])
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       Json
  category    String   @db.VarChar(50)
  label       String   @db.VarChar(255)
  description String?  @db.Text
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([category])
}
